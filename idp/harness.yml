pipeline:
  name: Java Microservice Pipeline
  identifier: java_microservice_pipeline
  projectIdentifier: your_project
  orgIdentifier: your_org
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: your_git_connector
        repoName: your-microservice-repo
        build: <+input>
  stages:
    # CI Stage - Build and Test
    - stage:
        name: Build and Test
        identifier: build_and_test
        description: Build Java microservice, run tests, and push to registry
        type: CI
        spec:
          cloneCodebase: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              # Unit Tests
              - step:
                  type: Run
                  name: Run Unit Tests
                  identifier: run_unit_tests
                  spec:
                    connectorRef: your_docker_hub_connector
                    image: maven:3.8.6-openjdk-11
                    shell: Sh
                    command: |
                      mvn clean test
                      mvn jacoco:report
                    reports:
                      type: JUnit
                      spec:
                        paths:
                          - "target/surefire-reports/*.xml"
                    envVariables:
                      MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"

              # Build Docker Image
              - step:
                  type: BuildAndPushDockerRegistry
                  name: Build and Push Docker Image
                  identifier: build_and_push
                  spec:
                    connectorRef: your_docker_registry_connector
                    repo: your-org/your-microservice
                    tags:
                      - "<+codebase.branch>-<+codebase.commitSha>"
                      - "<+codebase.branch>-latest"
                    dockerfile: Dockerfile
                    context: .
                    optimize: true
                  when:
                    stageStatus: Success

    # Deploy to Test Namespace (All Branches)
    - stage:
        name: Deploy to Test
        identifier: deploy_to_test
        description: Deploy to test namespace for all branches
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: your_microservice_service
            serviceInputs:
              serviceDefinition:
                type: Kubernetes
                spec:
                  artifacts:
                    primary:
                      primaryArtifactRef: <+input>
                      sources:
                        - spec:
                            connectorRef: your_docker_registry_connector
                            imagePath: your-org/your-microservice
                            tag: "<+codebase.branch>-<+codebase.commitSha>"
          environment:
            environmentRef: test_environment
            deployToAll: false
            infrastructureDefinitions:
              - identifier: test_k8s_infra
          execution:
            steps:
              - step:
                  name: Rolling Deployment
                  identifier: rolling_deployment
                  type: K8sRollingDeploy
                  timeout: 10m
                  spec:
                    skipDryRun: false
                    pruningEnabled: false

              # Health Check
              - step:
                  type: Http
                  name: Health Check
                  identifier: health_check
                  spec:
                    url: http://your-microservice.test.svc.cluster.local:8080/health
                    method: GET
                    headers: []
                    outputVariables: []
                    timeout: 30s
                  timeout: 1m
            rollbackSteps:
              - step:
                  name: Rollback Deployment
                  identifier: rollback_deployment
                  type: K8sRollingRollback
                  timeout: 10m
                  spec:
                    pruningEnabled: false
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback

    # Conditional Deploy to Integration (Release Branches Only)
    - stage:
        name: Deploy to Integration
        identifier: deploy_to_integration
        description: Deploy release branches to integration namespace
        type: Deployment
        when:
          pipelineStatus: Success
          condition: <+codebase.branch>.startsWith("release/") || <+codebase.branch> == "main"
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: your_microservice_service
            serviceInputs:
              serviceDefinition:
                type: Kubernetes
                spec:
                  artifacts:
                    primary:
                      primaryArtifactRef: <+input>
                      sources:
                        - spec:
                            connectorRef: your_docker_registry_connector
                            imagePath: your-org/your-microservice
                            tag: "<+codebase.branch>-<+codebase.commitSha>"
          environment:
            environmentRef: <+pipeline.variables.integration_environment>
            deployToAll: false
            infrastructureDefinitions:
              - identifier: <+pipeline.variables.integration_infra>
          execution:
            steps:
              # Read deployment configuration
              - step:
                  type: ShellScript
                  name: Read Deployment Config
                  identifier: read_deployment_config
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |
                          # Read deployment configuration YAML
                          DEPLOYMENT_CONFIG=$(cat deployment-config.yaml)
                          
                          # Extract namespace for current branch
                          NAMESPACE=$(echo "$DEPLOYMENT_CONFIG" | yq eval ".releases[] | select(.branch == \"<+codebase.branch>\") | .namespace" -)
                          
                          if [ "$NAMESPACE" = "null" ] || [ -z "$NAMESPACE" ]; then
                            echo "No deployment configuration found for branch <+codebase.branch>"
                            exit 1
                          fi
                          
                          echo "Deploying to namespace: $NAMESPACE"
                    outputVariables:
                      - name: target_namespace
                        type: String
                        value: namespace
                    environmentVariables: []
                  timeout: 2m

              - step:
                  name: Rolling Deployment to Integration
                  identifier: rolling_deployment_integration
                  type: K8sRollingDeploy
                  timeout: 10m
                  spec:
                    skipDryRun: false
                    pruningEnabled: false

              # Integration Health Check
              - step:
                  type: Http
                  name: Integration Health Check
                  identifier: integration_health_check
                  spec:
                    url: http://your-microservice.<+execution.steps.read_deployment_config.output.outputVariables.target_namespace>.svc.cluster.local:8080/health
                    method: GET
                    headers: []
                    outputVariables: []
                    timeout: 30s
                  timeout: 1m
            rollbackSteps:
              - step:
                  name: Rollback Integration Deployment
                  identifier: rollback_integration_deployment
                  type: K8sRollingRollback
                  timeout: 10m
                  spec:
                    pruningEnabled: false

    # Integration Tests
    - stage:
        name: Integration Tests
        identifier: integration_tests
        description: Run integration tests in integration namespace
        type: CI
        when:
          pipelineStatus: Success
          condition: <+codebase.branch>.startsWith("release/") || <+codebase.branch> == "main"
        spec:
          cloneCodebase: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              # API Tests
              - step:
                  type: Run
                  name: Run API Integration Tests
                  identifier: run_api_tests
                  spec:
                    connectorRef: your_docker_hub_connector
                    image: maven:3.8.6-openjdk-11
                    shell: Sh
                    command: |
                      # Wait for service to be ready
                      sleep 30
                      
                      # Run integration tests pointing to integration environment
                      mvn test -Dtest.profile=integration \
                        -Dservice.url=http://your-microservice.<+pipeline.stages.deploy_to_integration.spec.execution.steps.read_deployment_config.output.outputVariables.target_namespace>.svc.cluster.local:8080
                    reports:
                      type: JUnit
                      spec:
                        paths:
                          - "target/failsafe-reports/*.xml"

              # Performance Tests
              - step:
                  type: Run
                  name: Run Performance Tests
                  identifier: run_performance_tests
                  spec:
                    connectorRef: your_docker_hub_connector
                    image: your-org/jmeter:latest
                    shell: Sh
                    command: |
                      jmeter -n -t performance-tests.jmx \
                        -Jhost=your-microservice.<+pipeline.stages.deploy_to_integration.spec.execution.steps.read_deployment_config.output.outputVariables.target_namespace>.svc.cluster.local \
                        -Jport=8080 \
                        -l results.jtl
                    reports:
                      type: JUnit
                      spec:
                        paths:
                          - "results.jtl"

    # Approval Gate for Production Promotion
    - stage:
        name: Approval for Pre-Production
        identifier: approval_for_pre_prod
        description: Manual approval gate before promoting to pre-production
        type: Approval
        when:
          pipelineStatus: Success
          condition: <+codebase.branch>.startsWith("release/") || <+codebase.branch> == "main"
        spec:
          execution:
            steps:
              - step:
                  name: Manual Approval
                  identifier: manual_approval
                  type: HarnessApproval
                  timeout: 1d
                  spec:
                    approvalMessage: |-
                      Please review the integration test results and approve deployment to pre-production.
                      
                      Branch: <+codebase.branch>
                      Commit: <+codebase.commitSha>
                      Integration Tests: <+pipeline.stages.integration_tests.status>
                    includePipelineExecutionHistory: true
                    approvers:
                      minimumCount: 1
                      disallowPipelineExecutor: false
                      userGroups:
                        - account._account_all_users
                    approverInputs: []

    # Deploy to Pre-Production
    - stage:
        name: Deploy to Pre-Production
        identifier: deploy_to_pre_prod
        description: Deploy to pre-production environment after approval
        type: Deployment
        when:
          pipelineStatus: Success
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: your_microservice_service
            serviceInputs:
              serviceDefinition:
                type: Kubernetes
                spec:
                  artifacts:
                    primary:
                      primaryArtifactRef: <+input>
                      sources:
                        - spec:
                            connectorRef: your_docker_registry_connector
                            imagePath: your-org/your-microservice
                            tag: "<+codebase.branch>-<+codebase.commitSha>"
          environment:
            environmentRef: pre_prod_environment
            deployToAll: false
            infrastructureDefinitions:
              - identifier: pre_prod_k8s_infra
          execution:
            steps:
              - step:
                  name: Rolling Deployment to Pre-Prod
                  identifier: rolling_deployment_pre_prod
                  type: K8sRollingDeploy
                  timeout: 10m
                  spec:
                    skipDryRun: false
                    pruningEnabled: false

              # Pre-Prod Health Check
              - step:
                  type: Http
                  name: Pre-Prod Health Check
                  identifier: pre_prod_health_check
                  spec:
                    url: http://your-microservice.pre-prod.svc.cluster.local:8080/health
                    method: GET
                    headers: []
                    outputVariables: []
                    timeout: 30s
                  timeout: 1m
            rollbackSteps:
              - step:
                  name: Rollback Pre-Prod Deployment
                  identifier: rollback_pre_prod_deployment
                  type: K8sRollingRollback
                  timeout: 10m
                  spec:
                    pruningEnabled: false

  variables:
    - name: integration_environment
      type: String
      description: Integration environment reference
      required: false
      value: integration_environment
    - name: integration_infra
      type: String
      description: Integration infrastructure reference
      required: false
      value: integration_k8s_infra