#!/bin/bash

# Script to delete all Istio ServiceEntries in a namespace
# Usage: ./delete-serviceentries.sh [namespace]
# If no namespace is provided, it will use the current kubectl context namespace

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if kubectl is installed
if ! command -v kubectl &> /dev/null; then
    print_error "kubectl is not installed or not in PATH"
    exit 1
fi

# Get namespace from argument or use current context
NAMESPACE=""
if [ $# -eq 1 ]; then
    NAMESPACE="$1"
    NAMESPACE_FLAG="-n $NAMESPACE"
    print_info "Using namespace: $NAMESPACE"
else
    CURRENT_NS=$(kubectl config view --minify --output 'jsonpath={..namespace}')
    if [ -z "$CURRENT_NS" ]; then
        CURRENT_NS="default"
    fi
    NAMESPACE="$CURRENT_NS"
    NAMESPACE_FLAG="-n $NAMESPACE"
    print_info "No namespace specified, using current context namespace: $NAMESPACE"
fi

# Verify namespace exists
if ! kubectl get namespace "$NAMESPACE" &> /dev/null; then
    print_error "Namespace '$NAMESPACE' does not exist"
    exit 1
fi

# Get all ServiceEntries in the namespace
print_info "Checking for ServiceEntries in namespace '$NAMESPACE'..."
SERVICEENTRIES=$(kubectl get serviceentries $NAMESPACE_FLAG -o jsonpath='{.items[*].metadata.name}' 2>/dev/null || echo "")

if [ -z "$SERVICEENTRIES" ]; then
    print_warning "No ServiceEntries found in namespace '$NAMESPACE'"
    exit 0
fi

# Convert space-separated string to array
read -ra SE_ARRAY <<< "$SERVICEENTRIES"
SE_COUNT=${#SE_ARRAY[@]}

print_info "Found $SE_COUNT ServiceEntries in namespace '$NAMESPACE':"
for se in "${SE_ARRAY[@]}"; do
    echo "  - $se"
done

# Confirmation prompt
echo
read -p "Are you sure you want to delete all these ServiceEntries? (y/N): " -r
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    print_info "Operation cancelled"
    exit 0
fi

# Delete all ServiceEntries
print_info "Deleting ServiceEntries..."
for se in "${SE_ARRAY[@]}"; do
    print_info "Deleting ServiceEntry: $se"
    if kubectl delete serviceentry "$se" $NAMESPACE_FLAG; then
        print_info "Successfully deleted: $se"
    else
        print_error "Failed to delete: $se"
    fi
done

print_info "Operation completed. All ServiceEntries in namespace '$NAMESPACE' have been processed."

# Verify deletion
REMAINING=$(kubectl get serviceentries $NAMESPACE_FLAG -o jsonpath='{.items[*].metadata.name}' 2>/dev/null || echo "")
if [ -z "$REMAINING" ]; then
    print_info "Verification: No ServiceEntries remaining in namespace '$NAMESPACE'"
else
    print_warning "Verification: Some ServiceEntries may still exist: $REMAINING"
fi